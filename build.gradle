apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'maven'

if (!hasProperty("spec")) {
    project.ext.spec = "java"
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7


version = System.getenv("MAVEN_UPLOAD_VERSION")

repositories {
    mavenLocal()
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
}

def buildAgainstMavenArtifacts = System.getProperty("buildJavaWithArtifacts")

dependencies {
    compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-core') :
            'com.couchbase.lite:couchbase-lite-java-core:' + version

    compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-native:sqlite-custom') :
            'com.couchbase.lite:couchbase-lite-java-sqlite-custom' + version

    compile 'org.bouncycastle:bcprov-jdk15on:1.50'

    compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-native:sqlcipher') :
            'com.couchbase.lite:couchbase-lite-java-sqlcipher' + version

    compile buildAgainstMavenArtifacts == null ?
            project(':libraries:couchbase-lite-java-forestdb') :
            'com.couchbase.lite:couchbase-lite-java-forestdb:' + version

    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Dependencies for testing with couchbase-lite-android test suits
    testCompile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    
    testCompile 'com.squareup.okhttp3:mockwebserver:3.11.0'

    // For JavaScript query test
    testCompile ('com.couchbase.lite:couchbase-lite-java-javascript:1.4.1'){
        exclude group: 'com.couchbase.lite', module: 'couchbase-lite-java-core'
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-java/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

def mavenPath() {
    System.getenv("MAVEN_BUILD_LOCAL") == "true" ?
            'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath :
            System.getenv("MAVEN_UPLOAD_REPO_URL")
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenPath()) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }

            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-java'
            pom.project {
                name 'com.couchbase.lite:couchbase-lite-java'
                description 'Couchbase Lite Java library'
                url 'http://developer.couchbase.com/mobile/'
                licenses {
                    license {
                        name 'Couchbase, Inc. Community Edition License Agreement'
                        url 'https://www.couchbase.com/binaries/content/assets/website/legal/ce-license-agreement.pdf'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'http://developer.couchbase.com/mobile/'
                    connection 'scm:git@github.com:couchbase/couchbase-lite-java.git'
                    developerConnection 'scm:git@github.com:couchbase/couchbase-lite-java.git'
                }
                developers {
                    developer {
                        name 'Couchbase Mobile'
                        email 'mobile@couchbase.com'
                        organization 'Couchbase'
                        organizationUrl 'http://www.couchbase.com'
                    }
                }
            }
        }
    }
}

task deleteExistingTests(type: Delete) {
    delete fileTree(dir: "src/test/java/com/couchbase/lite", exclude: "java")  
}

task deleteExistingAssets(type: Delete, dependsOn: deleteExistingTests) {
    delete 'src/test/resources/assets'
}

task copyAndroidTests(type: Copy, dependsOn: deleteExistingAssets) {
    from "../couchbase-lite-android/src/androidTest/java/com/couchbase/lite"
    into 'src/test/java/com/couchbase/lite'
}

task deleteBrokenTests(type: Delete, dependsOn: copyAndroidTests) {
    delete 'src/test/java/com/couchbase/lite/CollationTest.java', 'src/test/java/com/couchbase/lite/Base64Test.java'
}

task copyAndroidTestProperties(type: Copy, dependsOn: deleteBrokenTests) {
    from "../couchbase-lite-android/src/androidTest/assets"
    into 'src/test/resources/assets'
    include 'test.properties'
    filter { String line ->
        line.startsWith('sqliteLibrary') ? 'sqliteLibrary=1' : line
    }
}

task copyAndroidAssets(type: Copy, dependsOn: copyAndroidTestProperties) {
    from "../couchbase-lite-android/src/androidTest/assets"
    into 'src/test/resources/assets'
    exclude 'test.properties'
}

test {
    testLogging {
        // Logging these events to see individual test status:
        events "started", "passed", "skipped", "failed"
    }
}

test.dependsOn(copyAndroidAssets)
