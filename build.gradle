//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import java.time.Instant
import org.apache.tools.ant.filters.ReplaceTokens

// The Module-level Build File
buildscript {
    ext.kotlin_version = '1.3.41'
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'kotlin'
apply plugin: 'cpp'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

ext {
    buildHost = 'hostname'.execute().text.trim()
    buildTime = Instant.now().toString()
}

def homeDir = "${projectDir}"
def baseDir = "${homeDir}/.."
def etcDir = "${homeDir}/etc"
def cblCoreDir = "${baseDir}/couchbase-lite-core"

def cblVersion = file("${baseDir}/version.txt").text.trim()

// -PbuildNumber=123
def buildNum = (!hasProperty("buildNumber")) ? "0" : buildNumber

def buildCommit = 'git rev-parse --short HEAD'.execute([], file(homeDir)).text.trim() +
    (('git status -uno --porcelain'.execute([], file(homeDir)).text.length() <= 0) ? "" : "+")

group = 'com.couchbase.lite'

// Copy the version template into the source, inserting build info
task generateCBLVersion(type: Copy) {
    from("${projectDir}/templates/CBLVersion.java") {
        filter(
            ReplaceTokens,
            tokens: [VERSION: cblVersion, TIME: buildTime, HOST: buildHost, VARIANT: 'CE', TYPE: 'debug', BUILD: buildNum, COMMIT: buildCommit])
    }
    into "${projectDir}/src/main/java/com/couchbase/lite/internal/core"
}
generateCBLVersion.outputs.upToDateWhen { false }
compileJava.dependsOn generateCBLVersion

java {
    version = cblVersion

    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java",                    // Java specific code
                "src/shared/ce/java",               // Shared code between Java and Android (CE Only)
                "src/shared/main/java",             // Shared code between Java and Android
            ]
            resources.srcDirs = ["native_build"]    // Native Libraries
        }
        test {
            java.srcDirs = [
                "src/test/java",                    // Java specific tests
                "src/shared/test/java",             // Shared tests between Java and Android
            ]
            resources.srcDirs = [
                "src/shared/test/assets",          // Shared test assets between Java and Android
                "${cblCoreDir}/C/tests/data"       // lite-core test assets
            ]
        }
    }
}

test {
    exclude '**/ReplicatorWithSyncGateway*'
}

repositories {
    google()
    jcenter()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:28.0.0'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    implementation 'org.json:json:20180813'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'junit:junit:4.12'
}

// ----------------------------------------------------------------
// Native Build
// ----------------------------------------------------------------

// For generating JNI headers:
compileJava.options.compilerArgs += ["-h", "${projectDir}/src/shared/main/cpp"]

// JAVA_HOME:
def javaHome = org.gradle.internal.jvm.Jvm.current().javaHome

// LiteCore:
def liteCoreDir = "${baseDir}/couchbase-lite-core"
def liteCoreBuildDir = "${liteCoreDir}/build_cmake"

// Native Components:
model {
    repositories {
        libs(PrebuiltLibraries) {
            liteCore {
                headers.srcDir "${liteCoreDir}/C/include"
                headers.srcDir "${liteCoreDir}/vendor/fleece/API"
                headers.srcDir "${liteCoreDir}/vendor/fleece/Fleece/Support"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def arch = targetPlatform.architecture.name
                    if (os.macOsX && arch == 'x86-64') {
                        sharedLibraryFile = file("${liteCoreBuildDir}/macos/libLiteCore.dylib")
                        setupCopyNativeLibraryTask("CopyLiteCore", sharedLibraryFile, targetPlatform)
                    }
                }
            }
            mbedCrypto {
                headers.srcDir "${liteCoreDir}/vendor/mbedtls/include"
                binaries.withType(StaticLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def arch = targetPlatform.architecture.name
                    if (os.macOsX && arch == 'x86-64') {
                        staticLibraryFile = file("${liteCoreBuildDir}/macos/vendor/mbedtls/library/libmbedcrypto.a")
                    }
                }
            }
        }
    }
    components {
        LiteCoreJNI(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/shared/main/cpp"
                        include "**/*.cc"
                    }
                    lib library: 'liteCore', linkage: 'shared'
                    lib library: 'mbedCrypto', linkage: 'static'
                }
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }

            binaries.withType(SharedLibraryBinarySpec) { binary ->
                setupNativeLibraryTasks(binary.sharedLibraryFile, targetPlatform)
            }

            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${javaHome}/include"
                    cppCompiler.args '-I', "${javaHome}/include/darwin"
                    cppCompiler.args '-std=c++11'
                    linker.args '-stdlib=libc++'
                }
            }
        }
    }
}

def setupNativeLibraryTasks(library, platform) {
    tasks.whenTaskAdded { task ->
        if (task.name == "LiteCoreJNISharedLibrary") {
            def copyTaskName = "CopyLiteCoreJNI"
            setupCopyNativeLibraryTask(copyTaskName, library, platform)
            tasks.named(copyTaskName).get().dependsOn(task)
        }
    }
}

def setupCopyNativeLibraryTask(copyTaskName, library, platform) {
    def libPath = getLibraryOutputPath(platform)
    project.task([type: Copy], copyTaskName) {
        from (library)
        into "native_build/libs/${libPath}"
    }
    classes.dependsOn(copyTaskName)
}

def getLibraryOutputPath(platform) {
    def os = platform.operatingSystem.name
    def arch = platform.architecture.name.replaceAll("-", "_")
    def name = platform.name
    if (name == "windows_amd64" || name == "linux_amd64") {
        arch = "amd64"
    }
    return "${os}/${arch}"
}

// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "8.18"

    showViolations true

    configFile file("${etcDir}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${etcDir}/checkstyle")]
}

task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    configFile file("${etcDir}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${etcDir}/checkstyle")]

    source sourceSets.main.java.srcDirs
    include '**/*.java'

    classpath = files()
    showViolations true

    checkstyleTest.enabled = false

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/reports/checkstyle.html"))
        }
    }
}

apply plugin: 'pmd'
pmd { toolVersion "5.8.1" }
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${etcDir}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'

    pmdTest.enabled = false

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/reports/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/pmd.html"))
        }
    }
}

apply plugin: 'findbugs'
def findbugsAll = task('findbugs') {
    description 'Findbugs with all reports'
    group 'verification'
}

['Html', 'Xml'].each { reportType ->
    findbugsAll.dependsOn task("findbugs${reportType}", type: FindBugs) {
        description "Findbugs with $reportType report"
        group 'verification'

        dependsOn 'compileJava'

        findbugs.toolVersion = "3.0.1"

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        source = sourceSets.main.java.srcDirs

        classpath = files()

        excludeFilter = file("${etcDir}/findbugs/findbugs.xml")

        findbugsTest.enabled = false

        reports {
            xml {
                enabled = (reportType == "Xml")
                setDestination(file("${reportsDir}/findbugs.xml"))
            }
            html {
                enabled = (reportType == "Html")
                setDestination(file("${reportsDir}/findbugs.html"))
            }
        }
    }
}

task smoketest(dependsOn: ['checkstyleMain', 'findbugsHtml', 'pmdMain'])

task checkLocal(dependsOn: ['smoketest', 'test'])

task buildCI(dependsOn: ['checkstyleMain', 'findbugsXml', 'pmdMain', 'test'])
