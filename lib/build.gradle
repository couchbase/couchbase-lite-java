//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.os.OperatingSystem


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------

ext {
    CBL_GROUP = 'com.couchbase.lite'
    CBL_ARTIFACT_ID = 'couchbase-lite-java'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/LICENSE_community.txt"
    CBL_PROJECT_URL = 'https://github.com:couchbaselabs/couchbase-lite-java.git'
    CBL_ISSUES_URL = 'https://github.com:couchbaselabs/couchbase-lite-java.git/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'
    
    BUILD_RELEASE = file("$ROOT_DIR/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildCommit()

    JAVA_HOME = org.gradle.internal.jvm.Jvm.current().javaHome

    ETC_DIR = "${PROJECT_DIR}/etc"
    CBL_CORE_DIR = "${ROOT_DIR}/couchbase-lite-core"
    CBL_JAVA_DIR = "${ROOT_DIR}/couchbase-lite-java"
    CBL_CORE_NATIVE_DIR = "${PROJECT_DIR}/lite-core"
    CBL_NATIVE_DIR = "${buildDir}/native"
    REPORTS_DIR = "${buildDir}/reports"
    CBL_NATIVE_LIBRARIES = []
}

// comma separated list of annotations for tests that should not be run.
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl

// local.properties
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


// ----------------------------------------------------------------
// Build Java
// ----------------------------------------------------------------

apply plugin: 'cpp'
apply plugin: 'java-library'
apply plugin: 'java-library-distribution'
apply plugin: 'kotlin'

group = CBL_GROUP

java {
    version = BUILD_VERSION

    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java",                    // Java specific code
                "src/shared/ce/java",               // Shared code between Java and Android (CE Only)
                "src/shared/main/java",             // Shared code between Java and Android
            ]
            resources.srcDirs = [
                "src/main/resources",               // Resource files                
                "${CBL_NATIVE_DIR}"                 // Native Libraries
            ]    
        }
        test {
            java.srcDirs = [
                "src/test/java",                    // Java specific tests
                "src/shared/test/java",             // Shared tests between Java and Android
            ]
            resources.srcDirs = [
                "src/shared/test/assets",           // Shared test assets between Java and Android
                "${CBL_CORE_DIR}/C/tests/data"      // lite-core test assets
            ]
        }
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:28.0.0'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    implementation 'org.json:json:20180813'

    testCompileOnly 'com.android.support:support-annotations:28.0.0'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"

    testImplementation 'junit:junit:4.12'
}

// Copy the version template into the source, inserting build info
task generateCBLVersion(type: Copy) {
    outputs.upToDateWhen { false }
    from("templates/CBLVersion.java") {
        filter(
            ReplaceTokens,
            tokens: [
                VERSION: BUILD_VERSION.toString(),
                VARIANT: 'CE',
                TYPE   : 'release',
                BUILD  : BUILD_NUMBER.toString(),
                COMMIT : BUILD_COMMIT.toString()])
    }
    into "src/main/java/com/couchbase/lite/internal/core"
}
compileJava.dependsOn generateCBLVersion


// ----------------------------------------------------------------
// Build Native
// ----------------------------------------------------------------

// For generating JNI headers:
compileJava.options.compilerArgs += ["-h", "${PROJECT_DIR}/lib/src/shared/main/cpp"]

// UTF-8
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"


// Native Components:
model {
    platforms {
        osx {
            architecture "x86_64"
            operatingSystem "osx"
        }
        linux {
            architecture "x86_64"
            operatingSystem "linux"
        }
        windows {
            architecture "x86_64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp)
        clang(Clang)
    }

    repositories {
        libs(PrebuiltLibraries) {
            liteCore {
                headers.srcDir "${CBL_CORE_DIR}/C/include"
                headers.srcDir "${CBL_CORE_DIR}/vendor/fleece/API"
                headers.srcDir "${CBL_CORE_DIR}/vendor/fleece/Fleece/Support"
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    if (os.macOsX) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/macos/x86_64/libLiteCore.dylib")
                    } else if (os.linux) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/linux/x86_64/libLiteCore.so")
                    } else if (os.windows) {
                        sharedLibraryFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/LiteCore.dll")
                        sharedLibraryLinkFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/LiteCore.lib")
                    }
                }
            }
            mbedCrypto {
                headers.srcDir "${CBL_CORE_DIR}/vendor/mbedtls/include"
                binaries.withType(StaticLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    if (os.macOsX) {
                        staticLibraryFile = file("${CBL_CORE_NATIVE_DIR}/macos/x86_64/libmbedcrypto.a")
                    } else if (os.linux) {
                        staticLibraryFile = file("${CBL_CORE_NATIVE_DIR}/linux/x86_64/libmbedcrypto.a")
                    } else if (os.windows) {
                        staticLibraryFile = file("${CBL_CORE_NATIVE_DIR}/windows/x86_64/mbedcrypto.lib")
                    }
                }
            }
        }
    }

    components {
        LiteCoreJNI(NativeLibrarySpec) {
            if (OperatingSystem.current().isMacOsX()) targetPlatform "osx"
            if (OperatingSystem.current().isLinux()) targetPlatform "linux"
            if (OperatingSystem.current().isWindows()) targetPlatform "windows"
            sources {
                cpp {
                    source {
                        srcDir "src/shared/main/cpp"
                        include "**/*.cc"
                    }
                    lib library: 'liteCore', linkage: 'shared'
                    lib library: 'mbedCrypto', linkage: 'static'
                }
            }

            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }

            binaries.withType(SharedLibraryBinarySpec) { binary ->
                setupJNILibraryBuildTasks(binary.sharedLibraryFile, targetPlatform)
            }

            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${JAVA_HOME}/include"
                    cppCompiler.args '-I', "${JAVA_HOME}/include/darwin"
                    cppCompiler.args '-std=c++11'
                    cppCompiler.args '-stdlib=libc++'
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.linux) {
                    if (project.hasProperty("cxxIncludeDir")) {
                        cppCompiler.args '-isystem', project.property('cxxIncludeDir')
                    }
                    cppCompiler.args '-I', "${JAVA_HOME}/include"
                    cppCompiler.args '-I', "${JAVA_HOME}/include/linux"
                    cppCompiler.args '-std=c++11'
                    cppCompiler.args '-stdlib=libc++'
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${JAVA_HOME}/include"
                    cppCompiler.args "-I${JAVA_HOME}/include/win32"
                    cppCompiler.args "/MD"
                }
            }
        }
    }
}

/////// JavaDoc

javadoc {
    exclude "**/internal/**"
    exclude "com/couchbase/lite/utils"
    options {
        title = "Couchbase Lite ${BUILD_VERSION}, Community Edition"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/javase/8/docs/api/"
        addStringOption('Xdoclint:none', '-quiet')
    }
}

// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def fileFilter = ['**/gen/**', "okhttp3/**"]

/////// Checkstyle
apply plugin: 'checkstyle'
checkstyle {
    toolVersion = "8.18"

    configFile file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    showViolations true
}

task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    source sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    classpath = files()

    checkstyleTest.enabled = false

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.html"))
        }
    }
}

/////// PMD
apply plugin: 'pmd'
pmd { toolVersion "5.8.1" }
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    pmdTest.enabled = false

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// Findbugs
// !!! FIXME: Update to SpotBugs
apply plugin: 'findbugs'
def findbugsAll = task('findbugs') {
    description 'Findbugs with all reports'
    group 'verification'
}

project.afterEvaluate {
    ['Html', 'Xml'].each { reportType ->
        findbugsAll.dependsOn task("findbugs${reportType}", type: FindBugs) {
            description "Findbugs with $reportType report"
            group 'verification'

            dependsOn 'compileJava'

            findbugs.toolVersion = "3.0.1"
            
            findbugsTest.enabled = false

            effort = "max"
            reportLevel = "medium"
            ignoreFailures = false

            source = sourceSets.main.java.srcDirs

            classes = fileTree(dir: "${buildDir}/classes/java/main", excludes: fileFilter)
            classpath = files()

            excludeFilter = file("${ETC_DIR}/findbugs/findbugs.xml")

            reports {
                xml {
                    enabled = (reportType == "Xml")
                    setDestination(file("${REPORTS_DIR}/findbugs.xml"))
                }
                html {
                    enabled = (reportType == "Html")
                    setDestination(file("${REPORTS_DIR}/findbugs.html"))
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Testing
// ----------------------------------------------------------------

if (TEST_FILTER != null) {
    test { exclude "${TEST_FILTER}" }
}

// ----------------------------------------------------------------
// jar
// ----------------------------------------------------------------

jar {
    archivesBaseName = "${CBL_ARTIFACT_ID}"
}

// ----------------------------------------------------------------
// java-library-distribution
// ----------------------------------------------------------------

distributions {
    main {
        contents {
            baseName = "${CBL_ARTIFACT_ID}"
            into("support") {
                from "${CBL_CORE_NATIVE_DIR}/support"
            }
            eachFile {
                // Move the main jar file into lib folder
                if (it.name.startsWith("${CBL_ARTIFACT_ID}") && 
                    it.name.endsWith(".jar") && 
                    !it.path.contains("/lib/")) {
                    it.path = it.path.replace("/${CBL_ARTIFACT_ID}", "/lib/${CBL_ARTIFACT_ID}")
                }
            }
        }
    }
}

// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

apply plugin: 'maven-publish'

def mavenRepoUser = properties.getProperty('maven.repo.user')
def mavenRepoPass = properties.getProperty('maven.repo.pass')

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        couchbaseLiteJava(MavenPublication) {
            groupId group
            artifactId CBL_ARTIFACT_ID
            version BUILD_VERSION

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "${CBL_GROUP}:${CBL_ARTIFACT_ID}"
                description = CBL_DESCRIPTION
                url = CBL_SITE_URL
                licenses {
                    license {
                        name = CBL_LICENSE
                        url = CBL_LICENSE_URL
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        name = "Couchbase Mobile"
                        email = "mobile@couchbase.com"
                        organization = "Couchbase"
                        organizationUrl = "http://www.couchbase.com"
                    }
                }
                issueManagement {
                    system = "github"
                    url = CBL_ISSUES_URL
                }
                scm {
                    url = CBL_SITE_URL
                    connection = CBL_PROJECT_URL
                    developerConnection = CBL_PROJECT_URL
                }
            }
        }
    }

    repositories {
        maven {
            url = MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

task smokeTest(dependsOn: ['checkstyle', 'pmd', 'findbugsHtml', 'compileJava'])
task unitTest(dependsOn: ['smokeTest', 'test'])
task fullTest(dependsOn: ['unitTest'])

task ciCheck(dependsOn: ['checkstyle', 'pmd', 'findbugsXml', 'test'])
task ciCheckWindows(dependsOn: ['pmd', 'findbugsXml', 'test'])
task ciPublish(dependsOn: ['generatePomFileForCouchbaseLiteJavaPublication', 'publishCouchbaseLiteJavaPublicationToMavenRepository'])

// ordering (roughly last to first)
project.afterEvaluate {
    tasks.withType(FindBugs) { shouldRunAfter tasks.withType(Pmd) }

    tasks.whenTaskAdded {
        if (it.name.startsWith("findbugs")) {
            test.shouldRunAfter(it)
        }
        if (it.name.startsWith("checkstyle")) {
            pmd.shouldRunAfter(it)
        }
    }
}


// ----------------------------------------------------------------
// Extensions
// ----------------------------------------------------------------

def setupJNILibraryBuildTasks(library, platform) {
    tasks.whenTaskAdded { task ->
        if (task.name == "LiteCoreJNISharedLibrary") {
            task.dependsOn(compileJava)
            createCopyNativeLibraryTask(library, platform)
        }
    }
}

def createCopyNativeLibraryTask(library, targetPlatform) {
    if (CBL_NATIVE_LIBRARIES.contains(library)) return

    def libPath = getNativeLibraryResourcePath(targetPlatform)
    task copyJni(type: Copy, dependsOn: LiteCoreJNISharedLibrary) {
        from library
        into "${CBL_NATIVE_DIR}/libs/${libPath}"
    }

    task copyLiteCore(type: Copy, dependsOn: LiteCoreJNISharedLibrary) {
        from ("${CBL_CORE_NATIVE_DIR}") {
            include "macos/**"
            include "linux/**"
            include "windows/**"
            exclude "**/*.a"
            exclude "**/*.lib"
            exclude "**/*.pdb"
        }
        into "${CBL_NATIVE_DIR}/libs"
    }

    task generateNativeLibraryMD5(dependsOn: ["copyJni", "copyLiteCore"]) {
        doFirst {
            fileTree(dir: "${CBL_NATIVE_DIR}/libs", exclude: "**/*.MD5").each { File file ->
                ant.checksum(file: file)
            }
        }
    }

    processResources.dependsOn(["generateNativeLibraryMD5"])
}

def getNativeLibraryResourcePath(platform) {
    def os = ""
    if (platform.operatingSystem.isMacOsX())
        os = "macos";
    else if (platform.operatingSystem.isWindows())
        os = "windows"
    else if (platform.operatingSystem.isLinux())
        os = "linux"
    else
        os = platform.operatingSystem.name
    return "${os}/x86_64"
}


def getLicenseVersion() {
    def version = "master"
    try { version = 'git rev-parse --short HEAD'.execute([], file("${ROOT_DIR}/product-texts")).text.trim() }
    catch (Exception ignore) {}
    return version
}

def getBuildCommit() {
    def commit = "unknown"
    try {
        commit = 'git rev-parse --short HEAD'.execute([], file(PROJECT_DIR)).text.trim()
        if ('git status -uno --porcelain'.execute([], file(PROJECT_DIR)).text.length() <= 0) { commit += "+" }
    }
    catch (Exception ignore) {}
    return commit
}

